import React, { useState } from "react";
import "./ProfileCard.css";

function ProfileCard({ profile }) {
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á Avatar (‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠)
  const getInitials = (name) => {
    return name
      .split(" ")
      .map((n) => n[0])
      .join("")
      .toUpperCase();
  };

  

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà skill
  const handleSkillClick = (skill) => {
    alert(`${profile.name} ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô ${skill}!`);
  };

  // TODO: ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡πÅ‡∏•‡∏∞ functions ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô Challenge
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [viewCount, setViewCount] = useState(0);
const [favoriteHobbies, setFavoriteHobbies] = useState([]);
const [showContactForm, setShowContactForm] = useState(false);

const handleCardClick = () => {
    setViewCount(viewCount+1)
};

const toggleFavoriteHobby = (hobby) => {
    setFavoriteHobbies(hobby)
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Contact
  const handleContactClick = () => {
    setShowContactForm(!showContactForm)
  };

  const toggleTheme = () => {
    setIsDarkMode(!isDarkMode); // toggle ‡∏Ñ‡πà‡∏≤ true/false
  };

  // TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏° className conditionally
  const cardClassName = `profile-card ${isDarkMode ? "dark" : "light"}`;

  return (
    <div className={cardClassName}>
      {/* ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß - ‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠ */}
      <div className="profile-header">
      <div className={cardClassName} onClick={handleCardClick}>
    {/* ‡πÄ‡∏û‡∏¥‡πà‡∏° view counter */}
    <div className="view-counter">
        üëÅÔ∏è Views: {viewCount}
    </div>
    
    
    
    
</div>
        {/* TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° theme toggle */}
        <button className="theme-toggle" onClick={toggleTheme}>
          {isDarkMode ? "‚òÄÔ∏è" : "üåô"}
        </button>
        <div className="profile-avatar">{getInitials(profile.name)}</div>
        <h1 className="profile-name">{profile.name}</h1>
        <div className="student-id">{profile.studentId}</div>
      </div>

      {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô */}
      <div className="profile-info">
        <div className="info-item">
          <div className="info-label">‡∏™‡∏≤‡∏Ç‡∏≤</div>
          <div className="info-value">{profile.major}</div>
        </div>
        <div className="info-item">
          <div className="info-label">‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ</div>
          <div className="info-value">{profile.year}</div>
        </div>
        <div className="info-item">
          <div className="info-label">‡∏≠‡∏≤‡∏¢‡∏∏</div>
          <div className="info-value">{profile.age} ‡∏õ‡∏µ</div>
        </div>
        <div className="info-item">
          <div className="info-label">‡πÄ‡∏Å‡∏£‡∏î</div>
          <div className="info-value">
            {profile.gpa.toFixed(2)}
            {profile.gpa >= 3.5 && " üåü"}
          </div>
        </div>
      </div>

    

      {/* ‡∏á‡∏≤‡∏ô‡∏≠‡∏î‡∏¥‡πÄ‡∏£‡∏Å */}
      <div className="profile-section">
        <h3>üéØ ‡∏á‡∏≤‡∏ô‡∏≠‡∏î‡∏¥‡πÄ‡∏£‡∏Å</h3>
          {/* ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç hobbies list */}
    <ul className="hobbies-list">
        {profile.hobbies.map((hobby, index) => (
            <li 
                key={index} 
                className={`hobby-item ${favoriteHobbies.includes(hobby) ? 'favorite' : ''}`}
                onClick={(e) => {
                    e.stopPropagation();
                    toggleFavoriteHobby(hobby);
                }}
            >
                {hobby} {favoriteHobbies.includes(hobby) && 'üíñ'}
            </li>
        ))}
    </ul>
      </div>

      {/* ‡∏ó‡∏±‡∏Å‡∏©‡∏∞ */}
      <div className="profile-section">
        <h3>üíª ‡∏ó‡∏±‡∏Å‡∏©‡∏∞</h3>
        <div className="skills">
          {profile.skills.map((skill, index) => (
            <div
              key={index}
              className="skill-tag"
              onClick={() => handleSkillClick(skill)}
            >
              {skill}
            </div>
          ))}
        </div>
      </div>
      {/* Achievement Badges - ‡∏´‡∏•‡∏±‡∏á info section */}
      <div className="profile-section">
        <h3>üèÜ Achievements</h3>
        <div className="achievements">
          {/* TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏™‡∏î‡∏á badges */}
          {profile.gpa >= 3.5 && (
            <span className="achievement-badge">üåü ‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ô‡∏¥‡∏¢‡∏°</span>
          )}
          {profile.skills.length >= 5 && (
            <span className="achievement-badge">üí™ Multi-skilled</span>
          )}
          {/* ‡πÄ‡∏û‡∏¥‡πà‡∏° achievement ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏≠‡∏∑‡πà‡∏ô‡πÜ */}
        </div>
      </div>

      {/* Social Links - ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏á */}
      {profile.socialLinks && profile.socialLinks.length > 0 && (
        <div className="profile-section">
          <h3>üåê Social Media</h3>
          <div className="social-links">
            <ul>
              {profile.socialLinks.map((data, index) => (
                <li key={index}>
                  <a
                    href={data.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    style={{ color: "white" }}
                  >
                    {data.platform}
                  </a>
                </li>
              ))}
            </ul>
          </div>
        </div>
      )}

      {/* TODO: ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° sections ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô Challenge */}

      {/* ‡∏õ‡∏∏‡πà‡∏° Contact */}
      {/* Contact Form */}
    {showContactForm && (
        <div className="contact-form">
         <div className="material-form-container">
  <form className="material-form" noValidate>
    <div className="material-input-group">
      <input type="text" id="username" className="material-input" required />
      <label htmlFor="username" className="material-label">Username</label>
      <div className="material-input-bar" />
    </div>
    <div className="material-input-group">
      <input type="email" id="email" className="material-input" required />
      <label htmlFor="email" className="material-label">Email</label>
      <div className="material-input-bar" />
    </div>
    <div className="material-input-group">
      <input type="password" id="password" className="material-input" required />
      <label htmlFor="password" className="material-label">Password</label>
      <div className="material-input-bar" />
    </div>
    <button type="submit" className="material-button">Submit</button>
  </form>
</div>

        </div>
    )}
      <button className="contact-button" onClick={handleContactClick}>
        üìß ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ {profile.name}
      </button>
    </div>
  );
}

export default ProfileCard;
